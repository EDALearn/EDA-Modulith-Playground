<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>io.zenwave360.example</groupId>
	<artifactId>online-food-delivery-modulith</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>online-food-delivery-modulith</name>
	<description>ZenWave-SDK Examples Playground for Modulith</description>
	<properties>
		<java.version>21</java.version>
		<spring-modulith.version>1.3.4</spring-modulith.version>
        <spring-cloud.version>2024.0.0</spring-cloud.version>
        <spring-cloud-stream-schema.version>2.2.1.RELEASE</spring-cloud-stream-schema.version>
		<mapstruct.version>1.5.3.Final</mapstruct.version>
        <zenwave.version>2.1.0-SNAPSHOT</zenwave.version>
		<archunit-junit5.version>1.2.1</archunit-junit5.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing-bridge-otel</artifactId>
		</dependency>
		<dependency>
			<groupId>io.opentelemetry</groupId>
			<artifactId>opentelemetry-exporter-zipkin</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-starter-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-starter-mongodb</artifactId>
		</dependency>

        <dependency>
            <groupId>org.springframework.modulith</groupId>
            <artifactId>spring-modulith-events-kafka</artifactId>
        </dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok-mapstruct-binding</artifactId>
			<version>0.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<!-- swagger -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.5.0</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-testcontainers</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.modulith</groupId>
			<artifactId>spring-modulith-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5-api</artifactId>
			<version>${archunit-junit5.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- Adding the engine dependency to the surefire-plugin unfortunately does not work in the current version. -->
		<!-- https://www.archunit.org/userguide/html/000_Index.html#_junit_5 -->
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5-engine</artifactId>
			<version>${archunit-junit5.version}</version>
			<scope>test</scope>
		</dependency>
        <dependency>
            <groupId>io.zenwave360.sdk.plugins</groupId>
            <artifactId>java-to-asyncapi</artifactId>
            <version>${zenwave.version}</version>
            <scope>test</scope>
        </dependency>
	</dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.modulith</groupId>
                <artifactId>spring-modulith-bom</artifactId>
                <version>${spring-modulith.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>7.11.0</version>
				<configuration>
					<generatorName>spring</generatorName>
					<modelNameSuffix>DTO</modelNameSuffix>
					<addCompileSourceRoot>true</addCompileSourceRoot>
                    <skipIfSpecIsUnchanged>true</skipIfSpecIsUnchanged>
					<supportingFilesToGenerate>
						ApiUtil.java
					</supportingFilesToGenerate>
					<typeMappings>
						<typeMapping>Double=java.math.BigDecimal</typeMapping>
					</typeMappings>
					<configOptions>
                        <useSpringBoot3>true</useSpringBoot3>
                        <documentationProvider>none</documentationProvider>
                        <openApiNullable>false</openApiNullable>
                        <useOptional>false</useOptional>
                        <useTags>true</useTags>
                        <interfaceOnly>true</interfaceOnly>
                        <skipDefaultInterface>true</skipDefaultInterface>
                        <delegatePattern>false</delegatePattern>
                        <sortParamsByRequiredFlag>false</sortParamsByRequiredFlag>
					</configOptions>
				</configuration>
				<executions>
					<execution>
						<id>openapi-customers</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/public/apis/openapi-customers.yml</inputSpec>
							<apiPackage>io.zenwave360.example.customers</apiPackage>
							<modelPackage>io.zenwave360.example.customers.dtos</modelPackage>
						</configuration>
					</execution>
					<execution>
						<id>openapi-orders</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/public/apis/openapi-orders.yml</inputSpec>
							<apiPackage>io.zenwave360.example.orders.adapters.web</apiPackage>
							<modelPackage>io.zenwave360.example.orders.adapters.web.dtos</modelPackage>
						</configuration>
					</execution>
					<execution>
						<id>openapi-restaurants</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/public/apis/openapi-restaurants.yml</inputSpec>
							<apiPackage>io.zenwave360.example.restaurants.adapters.web</apiPackage>
							<modelPackage>io.zenwave360.example.restaurants.adapters.web.dtos</modelPackage>
						</configuration>
					</execution>
					<execution>
						<id>openapi-delivery</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/public/apis/openapi-delivery.yml</inputSpec>
							<apiPackage>io.zenwave360.example.delivery.adapters.web</apiPackage>
							<modelPackage>io.zenwave360.example.delivery.adapters.web.dtos</modelPackage>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

    <profiles>
        <profile>
            <id>asyncapi</id>
            <activation>
                <file>
                    <exists>${project.basedir}/src/main/resources/public/apis/asyncapi-orders.yml</exists>
                </file>
            </activation>
            <dependencies>
                <!-- kafka -->
                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-starter-stream-kafka</artifactId>
                </dependency>
                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-stream-schema</artifactId>
                    <version>${spring-cloud-stream-schema.version}</version>
                </dependency>
                <!-- spring cloud streams events externalizer -->
                <dependency>
                    <groupId>io.zenwave360.sdk</groupId>
                    <artifactId>spring-modulith-events-scs</artifactId>
                    <version>1.0.0</version>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.zenwave360.sdk</groupId>
                        <artifactId>zenwave-sdk-maven-plugin</artifactId>
                        <version>${zenwave.version}</version>
                        <configuration>
<!--                            <inputSpec>${project.basedir}/src/main/resources/public/apis/asyncapi-orders.yml</inputSpec>-->
                            <inputSpec>classpath:/public/apis/asyncapi-orders.yml</inputSpec>
                            <includeProjectClasspath>true</includeProjectClasspath>
                            <addCompileSourceRoot>true</addCompileSourceRoot><!-- default is true -->
                            <addTestCompileSourceRoot>true</addTestCompileSourceRoot><!-- default is true -->
                        </configuration>
                        <executions>
                            <!-- Generate Models/DTOs -->
                            <execution>
                                <id>generate-asyncapi-orders-dtos</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                                <configuration>
                                    <generatorName>jsonschema2pojo</generatorName>
                                    <configOptions>
                                        <modelPackage>io.zenwave360.example.orders.core.domain.events2</modelPackage>
                                    </configOptions>
                                </configuration>
                            </execution>
                            <!-- Generate AsyncAPI Provider (Producer of Events) -->
                            <execution>
                                <id>generate-asyncapi-orders-producer</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                                <configuration>
                                    <generatorName>spring-cloud-streams3</generatorName>
                                    <configOptions>
                                        <role>provider</role>
                                        <style>imperative</style>
<!--                                        <transactionalOutbox>modulith</transactionalOutbox>-->
                                        <apiPackage>io.zenwave360.example.orders.core.outbound.events</apiPackage>
                                        <modelPackage>io.zenwave360.example.orders.core.domain.events2</modelPackage>
                                    </configOptions>
                                </configuration>
                            </execution>
                        </executions>

                        <!-- add any sdk plugin (custom or standard) as dependency here -->
                        <dependencies>
                            <dependency>
                                <groupId>io.zenwave360.sdk.plugins</groupId>
                                <artifactId>asyncapi-spring-cloud-streams3</artifactId>
                                <version>${zenwave.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>io.zenwave360.sdk.plugins</groupId>
                                <artifactId>asyncapi-jsonschema2pojo</artifactId>
                                <version>${zenwave.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
