
/**
 * ZenWave Online Food Delivery - Restaurants Module.
 */
config {
    title "ZenWave Online Food Restaurants - Restaurants Module"
    basePackage "io.zenwave360.example.restaurants"
    persistence mongodb
    haltOnFailFormatting false

    // these should match the values of openapi-generator-maven-plugin
    openApiApiPackage "{{basePackage}}.adapters.web"
    openApiModelPackage "{{basePackage}}.adapters.web.dtos"
    openApiModelNameSuffix DTO

    plugins {

        ZDLToOpenAPIPlugin {
            idType string
            targetFile "src/main/resources/apis/openapi-restaurants.yml"
        }

        BackendApplicationDefaultPlugin {
            useLombok true
            includeEmitEventsImplementation true
            --force // overwite all files
        }

        OpenAPIControllersPlugin {
            specFile "src/main/resources/apis/openapi-restaurants.yml"
            zdlFile "models/restaurants.zdl"
        }

        SpringWebTestClientPlugin {
            openapiFile "src/main/resources/apis/openapi-restaurants.yml"
        }
    }
}


// == Aggregates =============================

/**
 * Restaurants Aggregate
 */
aggregate KitchenOrderAggregate (KitchenOrder) {

    createKitchenOrder(KitchenOrderInput) withEvents KitchenOrderStatusUpdated

    onOrderStatusUpdated(OrderStatusUpdated) withEvents KitchenOrderStatusUpdated

    updateKitchenOrderStatus(KitchenOrderStatusInput) withEvents KitchenOrderStatusUpdated
}

// == Entities =============================

@aggregate
entity Restaurant {
    name String required unique minlength(2) maxlength(250)
    phone String required
    address Address {
        street String required
        city String required
        state String required
        zip String required
    }
}

@aggregate
entity MenuItem {
    restaurantId String required
    name String required minlength(2) maxlength(250)
    description String
    price BigDecimal required min(0)
}

//@aggregate
entity KitchenOrder {
    orderId String required
    restaurantId String required
    date LocalDateTime required
    items MenuItem[] required
    status KitchenOrderStatus required
    customer CustomerDetails {
        name String required
        phone String required
        address CustomerAddress {
            street String required
            city String required
            state String required
            zip String required
        }
    }
}

enum KitchenOrderStatus {
    ACCEPTED, REJECTED, IN_PROGRESS, READY, DELIVERED, CANCELLED
}


// == RestaurantBackOfficeService =============================

@inline
input RestaurantIdInput {
    restaurantId String required
}

@rest("/restaurants")
service RestaurantBackOfficeService for (Restaurant, MenuItem) {

  @post
  createRestaurant(Restaurant) Restaurant withEvents RestaurantEvent

  @get("/{restaurantId}")
  getRestaurant(id) Restaurant?

  @get @paginated
  listRestaurants() Restaurant[]

  @post("/{restaurantId}/menuItems")
  createMenuItem(MenuItem) MenuItem

  @put("/{restaurantId}/menuItems/{name}")
  updateMenuItem(id, MenuItem) MenuItem?

  @get("/{restaurantId}/menuItems")
  listMenuItems(RestaurantIdInput) MenuItem[]
}

//@asyncapi({channel: "RestaurantEventsChannel", topic: "restaurants.events"})
@copy(Restaurant)
event RestaurantEvent {
    id String required
}

// == RestaurantOrdersService =============================

input KitchenOrderInput {
    orderId String required
    restaurantId String required
    date LocalDateTime required
    items MenuItem[] required
    customer CustomerDetails required
}

input OrderStatusUpdated {
    orderId String
    dateTime Instant
    status String
    previousStatus String
}

input KitchenOrderStatusInput {
    status KitchenOrderStatus required
    operatorName String required
}

input KitchenOrdersFilter {
    restaurantId String
    status KitchenOrderStatus
}

@rest("/restaurants-orders")
service RestaurantOrdersService for (KitchenOrderAggregate) {

//    @asyncapi({api: OrdersAsyncAPI, channel: "OrdersChannel"})
    createKitchenOrder(KitchenOrderInput) KitchenOrder withEvents KitchenOrderStatusUpdated

//    @asyncapi({api: OrdersAsyncAPI, channel: "OrderUpdatesChannel"})
    onOrderStatusUpdated(OrderStatusUpdated) withEvents KitchenOrderStatusUpdated

    @put("/{orderId}/status")
    updateKitchenOrderStatus(id, KitchenOrderStatusInput) KitchenOrder withEvents KitchenOrderStatusUpdated

    @post @paginated
    searchKitchenOrders(KitchenOrdersFilter) KitchenOrder[]
}

//@asyncapi({channel: "KitchenOrdersStatusChannel", topic: "restaurants.kitchen_order_status"})
event KitchenOrderStatusUpdated {
    customerOrderId String required
    kitchenOrderId String required
    status KitchenOrderStatus required
    message String
}
