/**
 * ZenWave Online Food Delivery - Delivery Module.
 */
config {
    title "ZenWave Online Food Delivery - Delivery Module"
    basePackage "io.zenwave360.example.delivery"
    persistence mongodb
    haltOnFailFormatting false

    // these should match the values of openapi-generator-maven-plugin
    openApiApiPackage "{{basePackage}}.adapters.web"
    openApiModelPackage "{{basePackage}}.adapters.web.dtos"
    openApiModelNameSuffix DTO

    plugins {

        ZDLToOpenAPIPlugin {
            idType string
            targetFile "src/main/resources/apis/openapi-delivery.yml"
        }

        BackendApplicationDefaultPlugin {
            useLombok true
            includeEmitEventsImplementation true
            --force // overwite all files
        }

        OpenAPIControllersPlugin {
            specFile "src/main/resources/apis/openapi-delivery.yml"
            zdlFile "models/delivery.zdl"
        }

        SpringWebTestClientPlugin {
            openapiFile "src/main/resources/apis/openapi-delivery.yml"
        }
    }
}
// == Aggregates =============================

/**
 * Delivery Aggregate
 */
aggregate DeliveryAggregate (Delivery) {

    createDelivery(DeliveryInput) withEvents DeliveryStatusUpdated

    onOrderStatusUpdated(OrderStatusUpdated) withEvents DeliveryStatusUpdated

    updateDeliveryStatus(DeliveryStatusInput) withEvents DeliveryStatusUpdated

}

// == Entities =============================

//@aggregate
entity Delivery {
    orderId String required
    customer Customer {
        customerId String required
        name String required
        phone String required
        address Address {
            street String
            zip String
        }
    }
    restaurant Restaurant {
        restaurantId String
        name String
        phone String
        address Address {
            street String
            zip String
        }
    }
    orderItems OrderItem[] {
       menuItemId String required
       name String required
       description String
       price BigDecimal required
       quantity Integer required
    }
    status DeliveryOrderStatus required
}

enum DeliveryOrderStatus {
    ACCEPTED, REJECTED, IN_PROGRESS, READY, DELIVERED, CANCELLED
}

// == Serices =============================
input DeliveryInput {
    orderId String required
    date LocalDateTime required
    restaurantId String required
    customerId String required
    items OrderItem[] required
}

input OrderStatusUpdated {
    orderId String
    dateTime Instant
    status String
    previousStatus String
}

input DeliveryStatusInput {
    status DeliveryOrderStatus required
    operatorName String required
}

@rest("/delivery")
service DeliveryService for (DeliveryAggregate) {

//    @asyncapi({api: OrdersAsyncAPI, channel: "OrderCreatedChannel"})
    createDelivery(DeliveryInput) Delivery withEvents DeliveryStatusUpdated

//    @asyncapi({api: OrdersAsyncAPI, channel: "OrderUpdatesChannel"})
    onOrderStatusUpdated(OrderStatusUpdated) Delivery withEvents DeliveryStatusUpdated

    @put("/{orderId}/status")
    updateDeliveryStatus(id, DeliveryStatusInput) Delivery withEvents DeliveryStatusUpdated

    @get @paginated
    listDeliveries() Delivery[]
}

//@asyncapi({channel: "DeliveryStatusChannel", topic: "delivery.delivery_status"})
event DeliveryStatusUpdated {
    customerOrderId String required
    deliveryId String required
    status DeliveryOrderStatus required
    message String
}
